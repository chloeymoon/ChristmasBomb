#BlueJ class context
comment0.target=Game
comment0.text=\n\ Implements\ the\ details\ for\ playing\ the\ game,\ using\ ChristmasTree\ and\ Item\ class\n\n\ @author\ Chloe\ Moon\n\ @version\ 12/08/2018\n
comment1.params=tree
comment1.target=Game(ChristmasTree)
comment1.text=\n\ Constructor\ for\ objects\ of\ class\ Game\n
comment10.params=
comment10.target=void\ start()
comment10.text=\n\ Checks\ if\ the\ game\ started,\ adds\ Item\ objects\ to\ the\ dormant\n\ array\ queue,\ and\ drop\ them\n
comment11.params=
comment11.target=ChristmasTree\ getTree()
comment11.text=\n\ Returns\ the\ ChristmasTree\ object\n\ \n\ @return\ ChristmasTree\n
comment12.params=
comment12.target=boolean\ win()
comment12.text=\n\ Returns\ true\ iff\ the\ user\ wins\ (if\ the\ score\ is\ above\ 1000)\n\ \n\ @return\ true\ iff\ the\ user\ wins\ (score\ above\ 1000)\ \n\ \ \ \ \ \ \ \ \ false\ otherwise\n
comment13.params=
comment13.target=boolean\ lose()
comment13.text=\n\ Returns\ true\ iff\ the\ user\ loses\n\ Checks\ if\ the\ score\ is\ below\ 0\ or\ win\ is\ false\ (for\ the\ case\n\ where\ score\ is\ above\ 0\ but\ the\ time\ runs\ out)\n
comment14.params=
comment14.target=void\ setLose()
comment14.text=\n\ Set\ win\ to\ false\ and\ ends\ the\ game\n
comment15.params=
comment15.target=boolean\ didEnd()
comment15.text=\n\ Return\ whether\ the\ game\ ended\ or\ not\n\ \n\ @return\ true\ iff\ the\ game\ ended,\ false\ otherwise\n
comment2.params=drop
comment2.target=void\ doCollide(Item)
comment2.text=\n\ Checks\ if\ tree\ collides\ with\ gift\ or\ bomb\ and\ sets\ collision\ var\ to\n\ the\ respective\ value\ (1\ if\ collides\ with\ present,\ 0\ if\ no\ collision,\n\ -1\ if\ collides\ with\ bomb)\n\ \n\ @param\ dropped\ item,\ christmas\ tree\n
comment3.params=
comment3.target=void\ endGame()
comment3.text=\n\ Ends\ the\ game\ if\ the\ score\ reches\ 1000\ or\ if\ the\ score\ <0.\n
comment4.params=
comment4.target=void\ addItem()
comment4.text=\n\ Retrieve\ Item\ objects\ from\ the\ dormant\ queue\ and\ adds\ them\ to\ \n\ the\ active\ linkedlist\ if\ the\ size\ of\ the\ active\ linkedlist\ is\ less\ than\ 6.\n
comment5.params=
comment5.target=void\ prepareItem()
comment5.text=\n\ Initialize\ Item\ objects\ to\ be\ added\ to\ the\ dormant\ Queue.\n\ Using\ the\ Random\ class,\ the\ method\ will\ create\ gifts\ and\ bombs\n\ in\ a\ 1\:1\ ratio.\n
comment6.params=
comment6.target=int\ getScore()
comment6.text=\n\ Returns\ the\ score\ of\ the\ game\n\ \n\ @return\ score\ of\ the\ game\n
comment7.params=sc
comment7.target=void\ setScore(int)
comment7.text=\n\ Sets\ score\ according\ to\ the\ input\ parameter\n\ \n\ @param\ input\ score\ (int)\n
comment8.params=
comment8.target=java.util.LinkedList\ getActive()
comment8.text=\n\ Returns\ the\ "active"\ linked\ list\ which\ contains\ the\ Items\n\ displayed\ on\ the\ screen\n\ \n\ @return\ linkedlist\ (active)\n
comment9.params=
comment9.target=void\ drop()
comment9.text=\n\ Iterates\ through\ the\ active\ vector\ and\ drops\ the\ Item\ objects\n
numComments=16
